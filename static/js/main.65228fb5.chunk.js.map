{"version":3,"sources":["logo.svg","Components/robotList.js","Components/SearchBar.js","Components/robotsObj.js","Components/Scroll.js","Containers/ErrorBoundary.js","Containers/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Title","Typography","RobotList","props","robots","map","robot","style","background","padding","borderRadius","width","height","margin","src","id","level","textAlign","name","SearchBar","type","justify","color","size","placeholder","onChange","onSearchChange","username","email","Scroll","overflowY","overflowX","maxHeight","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","Header","Layout","Content","Footer","Leiaoute","event","searchField","target","value","filteredRobots","filter","toLowerCase","includes","length","className","minHeight","gutter","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,0JCGpCC,EAASC,IAATD,MAwBQE,EAtBG,SAACC,GACf,OACIA,EAAMC,OAAOC,KAAI,SAACC,GACd,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMC,MAAO,CACTC,WAAY,UACZC,QAAQ,EACRC,aAAa,MACbC,MAAM,QACNC,OAAO,QACPC,OAAQ,OAER,yBAAKC,IAAG,+BAA0BR,EAAMS,GAAhC,mBACR,kBAACf,EAAD,CAAOgB,MAAO,EAAGT,MAAO,CAACU,UAAU,SAAUJ,OAAO,QAASP,EAAMY,Y,kEChBpFlB,EAASC,IAATD,MA0BQmB,EAxBG,SAAChB,GACf,OACI,kBAAC,IAAD,CAAKiB,KAAK,OAAOC,QAAQ,UACpB,kBAAC,IAAD,CAAKd,MAAO,CAACU,UAAU,WACpB,kBAAC,EAAD,CACIV,MAAO,CAAEe,MAAM,UACfT,OAAO,OACPG,MAAO,GAHX,UAMA,kBAAC,IAAD,CACIO,KAAK,QACLhB,MACK,CAAEC,WAAW,UACdG,MAAM,QACNa,YAAY,eACZC,SAAUtB,EAAMuB,oBCrB3BtB,EAAS,CACpB,CACEW,GAAI,EACJG,KAAM,gBACNS,SAAU,OACVC,MAAO,qBAET,CACEb,GAAI,EACJG,KAAM,eACNS,SAAU,YACVC,MAAO,qBAET,CACEb,GAAI,EACJG,KAAM,mBACNS,SAAU,WACVC,MAAO,sBAET,CACEb,GAAI,EACJG,KAAM,mBACNS,SAAU,WACVC,MAAO,6BAET,CACEb,GAAI,EACJG,KAAM,mBACNS,SAAU,SACVC,MAAO,4BAET,CACEb,GAAI,EACJG,KAAM,uBACNS,SAAU,mBACVC,MAAO,2BAET,CACEb,GAAI,EACJG,KAAM,kBACNS,SAAU,eACVC,MAAO,0BAET,CACEb,GAAI,EACJG,KAAM,2BACNS,SAAU,gBACVC,MAAO,wBAET,CACEb,GAAI,EACJG,KAAM,kBACNS,SAAU,WACVC,MAAO,2BAET,CACEb,GAAI,GACJG,KAAM,qBACNS,SAAU,iBACVC,MAAO,2BC3CIC,EAXA,SAAC1B,GACZ,OACI,yBAAKI,MAAO,CAACuB,UAAW,SACXC,UAAW,SACXC,UAAU,UAElB7B,EAAM8B,WCYJC,E,YApBX,aAAc,IAAD,8BACT,+CACKC,MAAQ,CACTC,UAAW,GAHN,E,+EAOKC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACH,0DAEAG,KAAKpC,MAAM8B,a,GAhBFQ,IAAMC,WCO3BC,EAA2BC,IAA3BD,OAAQE,EAAmBD,IAAnBC,QAASC,EAAUF,IAAVE,OA0DTC,E,YApDX,aAAc,IAAD,8BACT,+CAWJrB,eAAiB,SAACsB,GAAD,OAAW,EAAKR,SAAS,CAACS,YAAcD,EAAME,OAAOC,SAVlE,EAAKhB,MAAQ,CACT/B,OAASA,EACT6C,YAAc,IAJT,E,sEAcJ,IAAD,EACsBV,KAAKJ,MAA5B/B,EADC,EACDA,OAAQ6C,EADP,EACOA,YAETG,EAAiBhD,EAAOiD,QAAO,SAAA/C,GAAK,OAAIA,EAAMY,KAAKoC,cAAcC,SAASN,EAAYK,kBAExF,OAAQlD,EAAOoD,OAGP,kBAAC,IAAD,CACIC,UAAU,SACVlD,MAAO,CAACC,WAAY,2EACpB,kBAACmC,EAAD,CACIpC,MAAO,CAACmD,UAAU,QAClBlD,WAAY,2EACZ,kBAAC,EAAD,CAAWkB,eAAgBa,KAAKb,kBAEpC,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAACmB,EAAD,KACI,kBAAC,IAAD,CAAKzB,KAAK,OAAOC,QAAQ,SAASsC,OAAY,IAC1C,kBAAC,EAAD,CAAWvD,OAAQgD,QAMnC,kBAACN,EAAD,OApBR,2C,GArBWL,IAAMC,WCGdkB,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.65228fb5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport {Row, Col, Card, Typography} from 'antd';\n\nconst {Title} = Typography;\n\nconst RobotList = (props) => {\n    return (\n        props.robots.map((robot) => {\n            return (\n                <Col >\n                    <Card style={{\n                        background: \"#5cdbd3\", \n                        padding:0, \n                        borderRadius:\"10%\",\n                        width:\"240px\",\n                        height:\"320px\",\n                        margin: \"8%\"\n                    }}>\n                        <img src={`https://robohash.org/${robot.id}?size=200x200`}/>\n                        <Title level={4} style={{textAlign:\"center\", margin:\"10%\"}}>{robot.name}</Title>\n                    </Card>\n                </Col>\n            )\n        })\n    )\n}\n\nexport default RobotList;","import React from 'react';\nimport {Row, Col, Input, Typography} from 'antd';\n\nconst {Title} = Typography;\n\nconst SearchBar = (props) => {\n    return (\n        <Row type=\"flex\" justify=\"center\">\n             <Col style={{textAlign:\"center\", }}>\n                <Title \n                    style={{ color:'#073069', \n                    margin:\"10%\", }} \n                    level={2}>\n                        MROBOT\n                </Title>\n                <Input \n                    size=\"large\" \n                    style=\n                        {{ background:'#87e8de', \n                        width:\"100%\" }}  \n                        placeholder=\"Robot Search\"\n                        onChange={props.onSearchChange}\n                />\n            </Col>\n        </Row>\n       \n    )\n}\n\nexport default SearchBar;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from 'react';\n\n\n//two curly braces is cause it is an object inside of a js expression.\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll',\n                     overflowX: 'hidden', \n                     maxHeight:'800px'\n                    }}>\n            {props.children}      \n        </div>\n    )\n}\n\nexport default Scroll;","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n            hasError : false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true})\n    }\n\n    render(){\n        if(this.state.hasError){\n            return <h1>Oops, something went wrong</h1>\n        } else {\n            return this.props.children\n        }\n    }\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport {Layout} from 'antd';\nimport Robotlist from '../Components/robotList'\nimport SearchBar from '../Components/SearchBar'\nimport { Row} from 'antd';\nimport { robots } from '../Components/robotsObj';\nimport Scroll from '../Components/Scroll';\nimport ErrorBoundary from './ErrorBoundary';\n\nconst {Header, Content, Footer} = Layout;\n\n//state always needs a constructor\n//states are objects\n\nclass Leiaoute extends React.Component {\n    constructor(){\n        super()\n        this.state = {\n            robots : robots,\n            searchField : \"\"\n        }\n    }\n    // componentDidMount() {\n    //     fetch('https://jsonplaceholder.typicode.com/users')\n    //         .then(response => response.json())\n    //         .then(users => this.setState({robots: users}))\n    // }\n    onSearchChange = (event) => this.setState({searchField : event.target.value})\n\n    render(){\n    const {robots, searchField} = this.state;\n\n    const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n\n        return !robots.length ? \n            <h1>Loading</h1> :\n            (\n                <Layout \n                    className=\"layout\" \n                    style={{background: \"linear-gradient(90deg, rgba(128,180,158,1) 1%, rgba(88,190,188,1) 29%)\"}}>\n                    <Header \n                        style={{minHeight:'150px', \n                        background: \"linear-gradient(90deg, rgba(128,180,158,1) 1%, rgba(88,190,188,1) 29%)\"}}>\n                        <SearchBar onSearchChange={this.onSearchChange}  />\n                    </Header>\n                    <ErrorBoundary>\n                        <Scroll>\n                            <Content>\n                                <Row type=\"flex\" justify=\"center\" gutter={16, 48}>\n                                    <Robotlist robots={filteredRobots} />\n                                </Row>\n                            </Content>\n                        </Scroll>\n                    </ErrorBoundary>\n                 \n                    <Footer></Footer>\n                </Layout>\n            )\n        }\n\n     \n    s}\n   \n    \n\n\n\nexport default Leiaoute;\n\n// class Leiaoute extends React.Component {\n//     constructor(){\n//         super()\n//         this.state = {\n//             robots : [],\n//             searchField : \"\"\n//         }\n//     }\n\n//     // componentDidMount() {\n//     //     fetch('https://jsonplaceholder.typicode.com/users')\n//     //         .then(response => response.json())\n//     //         .then(users => this.setState({robots: users}))\n//     // }\n\n//     onSearchChange = (event) => this.setState({searchField : event.target.value})\n\n//     render(){\n//         const filteredRobots = this.state.robots.filter(robot => robot.name.toLowerCase().includes(this.state.searchField.toLowerCase()));\n//         if(this.state.robots.length === 0) {\n//             return <h1>Loading</h1>\n//         } else {\n//             return (\n//                 <Layout className=\"layout\" style={{background: \"linear-gradient(90deg, rgba(128,180,158,1) 1%, rgba(88,190,188,1) 29%)\"}}>\n//                     <Header style={{minHeight:'150px', background: \"linear-gradient(90deg, rgba(128,180,158,1) 1%, rgba(88,190,188,1) 29%)\"}}>\n//                         <SearchBar onSearchChange={this.onSearchChange} />\n//                     </Header>\n//                     <Content>\n//                         <Row type=\"flex\" justify=\"center\" gutter={16, 48}>\n//                             <Robotlist robots={filteredRobots} />\n//                         </Row>\n//                     </Content>\n//                     <Footer></Footer>\n//                 </Layout>\n//             )\n//         }\n   \n//     }\n\n// }\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport RobotList from './Components/robotList';\n\nimport Leiaoute from './Containers/Layout';\n\n\nfunction App() {\n  return (\n    <div>\n      <Leiaoute/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}